<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wxPython (Posts about Build)</title><link>https://wxpython.org/</link><description></description><atom:link href="https://wxpython.org/categories/build.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2025 &lt;a href="mailto:robin@alldunn.com"&gt;The wxPython Team&lt;/a&gt; </copyright><lastBuildDate>Thu, 06 Feb 2025 04:33:37 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Linux Build Post Updated</title><link>https://wxpython.org/blog/2018-02-03-linux-build-info-updated/index.html</link><dc:creator>Robin</dc:creator><description>&lt;p&gt;This is just a quick post to let everyone know that the previous post in this blog,
&lt;a href="https://wxpython.org/blog/2017-08-17-builds-for-linux-with-pip/index.html"&gt;Building wxPython for Linux via Pip&lt;/a&gt;
has been updated to include a simple set of build steps detailing how you can build your
own wxPython wheel on Linux or other Unix-like systems.&lt;/p&gt;</description><category>Build</category><category>Linux</category><guid>https://wxpython.org/blog/2018-02-03-linux-build-info-updated/index.html</guid><pubDate>Sat, 03 Feb 2018 22:06:40 GMT</pubDate></item><item><title>Building wxPython for Linux via Pip</title><link>https://wxpython.org/blog/2017-08-17-builds-for-linux-with-pip/index.html</link><dc:creator>Mesalu and Robin</dc:creator><description>&lt;div&gt;&lt;p&gt;[ Post updated 2018-02-03, see new &lt;strong&gt;Build Steps&lt;/strong&gt; section below. ]&lt;/p&gt;
&lt;h4&gt;wxPython Wheels for Linux?&lt;/h4&gt;
&lt;p&gt;Before reading further, you may want to check and see if there are already
some wxPython wheels available for your flavor of Linux. A few are built as
part of the release process and are available from one of wxPython's
servers. More details and some links are on the 
&lt;a href="https://wxpython.org/pages/downloads/"&gt;download page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If there are no existing wheels there for your distro, (or perhaps a close
relative,) then read on to find out why we can't just provide wheels for
all Linuxes, and what you need to build one for yourself.&lt;/p&gt;
&lt;h4&gt;The Problem&lt;/h4&gt;
&lt;p&gt;There have been some issues flowing into Phoenix's issue tracker since the
release of wxPython 4.0.0b1 related to installation issues on Linux using
pip, which have caused some overhead and soaked up unnecessary amounts of
time. So lets start with getting some of the basics out of the way. There
are a lot of flavors of linux. To name a few there's the Debian family,
Debian, Ubuntu, Kubuntu, Elementary, Mint, etc., Arch, Gentoo, RHEL and CentOS,
and so on. Each flavor has differences which can make binary distributions
incompatible across flavors.&lt;/p&gt;
&lt;p&gt;Why does this affect wxPython you may ask? It's just a Python package, and
Python source is independent across operating systems after all, right?.
Well, not all Python packages are just Python. wxPython as an example
contains binary extension modules (compiled C or C++ code that is platform
and architecture dependent.)  wxPython by default also contains a copy of
the compiled version of the wxWidgets library written in C++, which also
depends on other 3rd party libraries which need to not only be present at
runtime, but also have their development-related files present at
wxWidgets' and wxPython's compile time.&lt;/p&gt;
&lt;p&gt;Pip in its infinite wisdom can detect this, and knows how to select the
appropriate binary wheel for the following criteria:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS (Windows, macOS, Linux)&lt;/li&gt;
&lt;li&gt;Architecture (i386, x86_64, etc)&lt;/li&gt;
&lt;li&gt;Python Version (2.7, 3.5, 3.6, etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See how pip doesn't care about the specific linux distribution? That's the
issue. The binary content and dependencies of wxPython can't be delivered
consistently via pip. There are some efforts to get around this (eg.  &lt;a href="https://www.python.org/dev/peps/pep-0513/"&gt;PEP
513&lt;/a&gt; a.k.a. &lt;code&gt;manylinux1&lt;/code&gt;) but
they don't quite work for wxPython yet. Packages that are able to fit into
the very narrow &lt;code&gt;manylinux1&lt;/code&gt; requirements can be hosted on PyPI and will
install with pip just as smoothly as pure-python packages do. Unfortunately
the &lt;code&gt;manylinux1&lt;/code&gt; spec does not include a version of GTK+ and its
dependencies that are new enough to be able to provide all the features
that wxWidgets requires.&lt;/p&gt;
&lt;h4&gt;The Fix&lt;/h4&gt;
&lt;p&gt;In order to deploy to linux systems wxPython4 (Phoenix) simply builds
itself from a source tarball as part of the pip setup process. All of the
code generated by wxPython's build system is already present in the
tarball, it merely needs to be compiled. This causes a very lengthy
installation times, but is a necessary evil. Because the build is just
that, a build, you will need all of wxWidgets and wxPython's binary
dependencies present at build time. wxWidgets' configure will be run, and
if it detects missing libraries the whole build, and therefore the pip
installation, will fail.&lt;/p&gt;
&lt;h4&gt;What You Need&lt;/h4&gt;
&lt;p&gt;You will need the following packages (please consult your distribution's
package list for the appropriate package names) and their dependencies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python-dev (for your version of python)&lt;/li&gt;
&lt;li&gt;gtk (preferably version 3, but depends on your needs)&lt;/li&gt;
&lt;li&gt;gstreamer &lt;/li&gt;
&lt;li&gt;gstreamer-plugins-base&lt;/li&gt;
&lt;li&gt;glut&lt;/li&gt;
&lt;li&gt;libwebkitgtk (matching your gtk version)&lt;/li&gt;
&lt;li&gt;libjpeg&lt;/li&gt;
&lt;li&gt;libpng&lt;/li&gt;
&lt;li&gt;libtiff&lt;/li&gt;
&lt;li&gt;libsdl&lt;/li&gt;
&lt;li&gt;libnotify&lt;/li&gt;
&lt;li&gt;libsm&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;on Debian based systems, or other systems that separate development
packages from standard packages, you will need the corresponding &lt;code&gt;-dev&lt;/code&gt; or
&lt;code&gt;-devel&lt;/code&gt; package in addition to the standard package.&lt;/p&gt;
&lt;p&gt;Once the appropriate packages are present on your system then wxPython
should build with no problems, either with pip or from a source tree
extracted from the source tarball. If it still doesn't work for you then be
sure to look closely at the build log as there will likely be some clues
there that may point you in the right direction.  For example, this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;checking&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;OpenGL&lt;/span&gt; &lt;span class="nv"&gt;headers&lt;/span&gt;... &lt;span class="nv"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;found&lt;/span&gt;
&lt;span class="nv"&gt;checking&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;GL&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;gl&lt;/span&gt;.&lt;span class="nv"&gt;h&lt;/span&gt;... &lt;span class="nv"&gt;no&lt;/span&gt;
&lt;span class="nv"&gt;configure&lt;/span&gt;: &lt;span class="nv"&gt;error&lt;/span&gt;: &lt;span class="nv"&gt;OpenGL&lt;/span&gt; &lt;span class="nv"&gt;libraries&lt;/span&gt; &lt;span class="nv"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;available&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will tell you that the OpenGL libraries are missing. They are usually a
dependency of the glut or freeglut packages and should have been installed
along with that library, but perhaps your system's dependencies are
different and you'll need to do a little investigation to determine the
proper system packages that need to be installed.&lt;/p&gt;
&lt;h4&gt;Build Steps&lt;/h4&gt;
&lt;p&gt;Once you have installed the required depenency libraries, it should take
just a few steps to build a wxPython that will work on your system with
your Python. The steps shown here are just one option, but seems to be one
of the simpler approaches to take, and will require nothing extra to be
installed in your system Python. These instructions assume that you will be
using a 3.4+ version of Python and that the executable is called "python3".
If you are using 2.7 or the binary is called something else then adapt
accordingly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; The first thing we'll do is create and activate a new virtual
environment for the build and the initial testing. This is optional, but
highly recommended as it will ensure that there is nothing left over from a
previous build that could trip things up. The last two commands shown here
are just so you can verify that the python and pip commands are now being
found in the new virtual environment instead of from the system or other
Python environment.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cd [some tmp folder]

python3 -m venv builder_py
source builder_py/bin/activate

which python
which pip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Next, you'll want to update pip and add a few more packages.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;six&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wheel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;setuptools&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Use pip to download the latest source archive from PyPI.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wxPython&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Use pip to build a wxPython wheel file. We'll also redirect the
build output to a file so you can review it later if needed. This step will
take a while to complete, as it will be compiling all the wxWidgets and
wxPython source code, but you'll be able to watch the build output to
monitor the progress. Be sure to use the actual name of the downloaded
source archive file, which may be different than the one shown here.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip wheel -v wxPython-4.0.1.tar.gz  2&amp;gt;&amp;amp;1 | tee build.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; If the build was successful then you should now have a wxPython
wheel file in the current working directory. If there was a problem then
review the &lt;code&gt;build.log&lt;/code&gt; file and see if you can spot any clues as to what
dependencies may be missing or out of date. (Build problems from wxPython
release sources are almost always due to missing dependencies.) Once you
think you have solved the problem go back to step 4 and try the build
again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 6:&lt;/strong&gt; The next step is to install the wheel file in the virtual
environment and give it a quick test run. (Use the actual name of the wheel
file you built, which may be different than the one shown here.)&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;wxPython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cp35&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cp35m&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linux_x86_64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;whl&lt;/span&gt;

&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;"import wx; a=wx.App(); wx.Frame(None,title='hello world').Show(); a.MainLoop();"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see a new window open with a "hello world" title bar, which will
indicate that this build was successful and this wxPython wheel can be used
on your system. You can now use pip to install the wheel file in other
Python environments or virtual environments that use the same base Python
executable that you used for this build.&lt;/p&gt;
&lt;h4&gt;Known Issues&lt;/h4&gt;
&lt;p&gt;wxPython's build tools on Linux assume that the Python being used was configured
with the &lt;code&gt;--enable-shared&lt;/code&gt; flag. That is usually true for Pythons installed from
the Linux distro's repositories, as well as for most known 3rd Party Python
distributions for Linux. However, that flag is not enabled by default. So if
your Python is one that you've configured and built yourself, then double-check
that you used the flag. If it wasn't then you'll likely see a configuration
error when the build gets to the wxPython portion (after it has built
wxWidgets).&lt;/p&gt;
&lt;p&gt;Similarly, the &lt;strong&gt;&lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt;&lt;/strong&gt; does not use the
&lt;code&gt;--enable-shared&lt;/code&gt; flag when it builds a Python environment for you. 
There is a note in the 
&lt;a href="https://github.com/pyenv/pyenv/wiki#how-to-build-cpython-with---enable-shared"&gt;pyenv wiki&lt;/a&gt; 
that shows how to add the flag when it builds a new Python environment.&lt;/p&gt;
&lt;h4&gt;FAQ&lt;/h4&gt;
&lt;p&gt;Q1: "Why can't you just install the necessary packages as part of
wxPython's installation"&lt;/p&gt;
&lt;p&gt;A1: Lots of good reasons, among them are: Pip is NOT your linux package
manager, Phoenix is not responsible for maintaining your system.&lt;/p&gt;
&lt;p&gt;Q2: "I can install PyQt(4/5) just fine via pip! Why can't wxPython do the
same?"&lt;/p&gt;
&lt;p&gt;A2: Qt does not depend on system provided libraries other than the low-
level basic libs. wxWidgets does, it's one of the defining differences of
the two toolkits. As such PyQt can deliver to all linuxes in the same
manner.&lt;/p&gt;&lt;/div&gt;</description><category>Build</category><category>Linux</category><guid>https://wxpython.org/blog/2017-08-17-builds-for-linux-with-pip/index.html</guid><pubDate>Thu, 17 Aug 2017 19:14:19 GMT</pubDate></item></channel></rss>